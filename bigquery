with anz_tempt as (
  # pool of onboarding kyc cases
  select 
    -- basic.*, # should specify the fields here, not recommend to export *
    basic.account_id,
    basic.business_name as clientname,
    basic.contact_email as contactmail,
    basic.contact_name as contactperson,
    basic.contact_number as contactphone,
    basic.description_of_goods_or_services as description,
    basic.url[safe_offset(0)].url as url,
    basic.owning_entity,
    basic.country_code,
    basic.kyc_status,
    basic.account_status,
    datetime(timestamp(basic.kyc_receive_date),'Asia/Shanghai') as kyc_receive,
    datetime(timestamp(basic.kyc_pass_date),'Asia/Shanghai') as kyc_pass,
    basic.date_of_incorportation,
    if(length(basic.sf_owner_org_level_2)<2, basic.ab_ownerOrgLevel2, basic.sf_owner_org_level_2) as org_l2,
    if(length(basic.sf_account_owner)<2, basic.ab_accountOwner, basic.sf_account_owner) as accountOwner,
    if(anz.adhoc_wideuse2 is not null, 'anzblacklist', null) as anzblacklistindicator
  from `awx-dw.dwa_operation.kyc_ops_global_selfserve_businesskyc` basic
  left join `awx-dw.dwd_external_table.KYC_BAU_USE_BEN2`  anz
  on basic.account_id = anz.adhoc_wideuse2 
  # should not filter the kyc status and kyc create time here, or you will filter out the necessary info here
)


,event as (
  # pool of ip_address & device_id collected
  select distinct 
    event.account_id,
    event.client_ip,
    event.device_id,
    'new' as tag  -- just used to distinguish the two table sources
  from `risk-prod-d323cc1b.dwd_bluewhaleservice.event` event
  where tenant is not null  -- tenant = "Airwallex WebApp" i think no need to eliminate =	"Airwallex Pay"
  and event.account_id is not null
  -- and event.created_at > '2023-03-24 05:31:17' i think no need to specify the time range
  union all
  select distinct data.kycSubmissionContext.KYC_SUBMISSIon_ACCOUNT as account_id, 
  data.kycSubmissionIp as client_ip,
   '-1' as device_id,
   'old' as tag
  from `scale-prod-16021f8e.dwd_individualkyc.kyc_record` kr
)


,tempt as(
  # connect the two tables above
  select 
  distinct
    basic.*,
    event.client_ip,
    event.device_id,
    concat(ifnull(ubo.persondetails_name_firstname_local,''), ifnull(ubo.persondetails_name_middlename_local,''), ifnull(ubo.persondetails_name_lastname_local,'')) as keypersonname,
    string_agg(distinct cc,',' order by cc) as countrylist
  from anz_tempt as basic 
  left join event
  on event.account_id = basic.account_id
  left join `coredata-prod-82d1635c.dwd_account.ubo_info` as ubo
  on ubo.account_id = basic.account_id
  left join `platform-prod-f112f5ae.dwd_authorisation.account` as account
  on account.id = event.account_id
  left join unnest(account.data.accountDetails.businessDetails.operatingCountry) as cc
  -- where client_legal_entity_status = 'KYC'  alreay been refined in the old basic table at the beginning
  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20 
)

/*
seems redundant
,tempt as (
  select
  distinct 
    basic.account_id,
    event.client_ip,
    event.device_id,
    basic.business_name as clientname,
    basic.contact_email as contactmail,
    basic.contact_name as contactperson,
    basic.contact_number as contactphone,
    basic.description_of_goods_or_services as description,
    basic.url[SAFE_OFFSET(0)].url as url,
    basic.owning_entity,
    basic.country_code,
    basic.kyc_status,
    basic.account_status,
    DATETIME(TIMESTAMP(basic.kyc_receive_date),Asia/Shanghai') as kyc_receive,
    DATETIME(TIMESTAMP(basic.kyc_pass_date),'Asia/Shanghai') as kyc_pass,
    basic.date_of_incorportation,
    basic.sf_owner_org_level_2,
    basic.ab_accountOwner,
    concat(ifnull(ubo.persondetails_name_firstname_local,''), ifnull(ubo.persondetails_name_middlename_local,''), ifnull(ubo.persondetails_name_lastname_local,'')) as keypersonname,
    anzblacklistindicator,
    string_agg(distinct cc,',' order by cc) as countrylist
  from anz_tempt basic 
  left join event
  on event.account_id = basic.account_id
  left join `coredata-prod-82d1635c.dwd_account.ubo_info` as ubo
  on ubo.account_id = basic.account_id
  left join `platform-prod-f112f5ae.dwd_authorisation.account` account
  on account.id = event.account_id
  left join unnest(account.data.accountDetails.businessDetails.operatingCountry) as cc
  where client_legal_entity_status <> 'INITIAL' 
  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
)
*/


# following parts are used to split the clients into different criteria types
/*
take tempt_ip_1 as example,
the first row is ip_address1,
the first field is the ip itself,
the second field is the distinct list of accounts with the this same ip
the third field is the distinct list of anz_bad_tag accounts with this same ip
the fourth field is the amount of accounts stored in second field, "-1" here is used to deduct the id itself in the following mapped parts
the fifth field tis the acount of accounts sotred in third field, "-1" here is used to deduct the id itself in the following mapped parts
*/

,tempt_ip_1 as (
select 
  client_ip, 
  array_agg(distinct account_id) account_ip , 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_ip, 
  array_length(array_agg(distinct account_id)) -1 num_ip_linkedaccounts , 
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_ip_linkedaccounts from tempt
where client_ip is not null and client_ip <> ''
group by client_ip
)

,tempt_device_6 as (
select 
  device_id, 
  array_agg(distinct account_id) account_device, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_device, 
  array_length(array_agg(distinct account_id)) -1 num_device_linkedaccounts , 
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_device_linkedaccounts
from tempt
where device_id <> '-1' and device_id <> '' and device_id is not null
group by device_id
)

,tempt_url_country_description_2 as (
select 
  concat(ifnull(url, ''),countrylist, ifnull(description, '')) as url_country_description,  -- should consider if any of the fields here would be null, which would lead to the overall concat result to be null. countrylist would not be null or blank
  array_agg(distinct account_id) account_url, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_url,
  array_length(array_agg(distinct account_id) ) -1 num_url_country_description_linkedaccounts,
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_url_linkedaccounts
from tempt
-- where concat(url,countrylist, description) is not null  # reason: clients with no url or description are also suspicious i think 
group by 1
)

,tempt_client_3 as (
select clientname, array_agg(distinct account_id) account_clientname , 
array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_clientname,
array_length(array_agg(distinct account_id)) -1 as num_client_linkedaccounts,
array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_clientname_linkedaccounts
from tempt
where clientname is not null and clientname <> ''
group by clientname
)

,tempt_key_person_4 as (
select 
  keypersonname, 
  array_agg(distinct account_id) account_keypersonname, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_keypersonname,
  array_length(array_agg(distinct account_id)) -1 as num_keypersonname_linkedaccounts ,
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_keypersonname_linkedaccounts
from tempt
where keypersonname <> '' and keypersonname is not null  -- original clause: keypersonname > '-1' ???
group by keypersonname
)

,tempt_contact_person_4 as (
select 
  contactperson, 
  array_agg(distinct account_id) account_contactperson, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_contactperson,
  array_length(array_agg(distinct account_id)) -1 as num_contactperson_linkedaccounts, 
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_contactperson_linkedaccounts
from tempt
where contactperson <> '' and contactperson is not null
group by contactperson
)

,tempt_contactmail_5 as (
select 
  contactmail, 
  array_agg(distinct account_id) account_contactmail, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_contactmail,
  array_length(array_agg(distinct account_id)) -1 as num_contactmail_linkedaccounts, 
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_contactmail_linkedaccounts
from tempt
where contactmail is not null and contactmail <> ''
group by contactmail
)

,tempt_contactphone_5 as (
select 
  contactphone, 
  array_agg(distinct account_id) account_contactphone, 
  array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id end IGNORE NULLS) anz_account_contactphone,
  array_length(array_agg(distinct account_id)) -1 as num_contactphone_linkedaccounts, 
  array_length(array_agg(distinct case when anzblacklistindicator = 'anzblacklist' then account_id else null end)) -1 num_anz_contactphone_linkedaccounts
from tempt
where contactphone is not null and contactphone <> ''
group by contactphone
)




,final_result as (
select 
  tempt.account_id 

----------------anz result --------------------
  ,case when  (num_anz_clientname_linkedaccounts > 0 or num_anz_contactmail_linkedaccounts> 0 or num_anz_contactphone_linkedaccounts > 0 or num_anz_device_linkedaccounts > 0) then 'ANZ_True_Hit' 
    when  (num_anz_ip_linkedaccounts > 0 or num_anz_url_linkedaccounts > 0 or num_anz_keypersonname_linkedaccounts> 0 or num_anz_contactperson_linkedaccounts > 0) then 'ANZ_Possible_Hit' else null end as ANZ_Result

  ,(if(num_anz_clientname_linkedaccounts > 0, 1, 0) + if(num_anz_contactmail_linkedaccounts > 0, 1, 0) + if(num_anz_contactphone_linkedaccounts > 0, 1, 0) + if(num_anz_device_linkedaccounts > 0, 1, 0))  as num_anz_true_hit_reason
  ,(if(num_anz_ip_linkedaccounts > 0, 1, 0) + if(num_anz_url_linkedaccounts > 0, 1, 0) + if(num_anz_keypersonname_linkedaccounts > 0, 1, 0) + if(num_anz_contactperson_linkedaccounts > 0, 1, 0))  as num_anz_possible_hit_reason

  ,concat(if(num_anz_clientname_linkedaccounts > 0, 'Company_Name, ', ''), if(num_anz_contactmail_linkedaccounts > 0, 'Contact_Mail, ', ''), if(num_anz_contactphone_linkedaccounts > 0, 'Contact_Phone, ', ''), if(num_anz_device_linkedaccounts > 0, 'Device', '')) as anz_true_hit_reason
  ,concat(if(num_anz_ip_linkedaccounts > 0, 'IP, ', ''), if(num_anz_url_linkedaccounts > 0, 'URL_COUNTRY_DESCRIPTION, ', ''), if(num_anz_keypersonname_linkedaccounts > 0, 'Key_Person, ', ''), if(num_anz_contactperson_linkedaccounts > 0, 'Contact_Person', '')) as anz_possible_hit_reason

----------------general result --------------------
  ,case when num_client_linkedaccounts > 0 or num_contactmail_linkedaccounts > 0 or num_contactphone_linkedaccounts > 0 or num_device_linkedaccounts > 0   then 'General_True_Hit' 
  when num_ip_linkedaccounts > 0  or num_url_country_description_linkedaccounts > 0 or num_keypersonname_linkedaccounts > 0 or num_contactperson_linkedaccounts > 0 then 'General_Possible_Hit'
  else null end as General_Result

  ,if(num_client_linkedaccounts > 0, 1, 0) + if(num_contactmail_linkedaccounts > 0, 1, 0) + if(num_contactphone_linkedaccounts > 0, 1, 0) + if(num_device_linkedaccounts > 0, 1, 0) 
  as num_general_true_hit_reason

  ,if(num_ip_linkedaccounts > 0, 1, 0) + if(num_url_country_description_linkedaccounts > 0, 1, 0) + if(num_keypersonname_linkedaccounts > 0, 1, 0) + if(num_contactperson_linkedaccounts > 0, 1, 0) 
  as num_general_possible_hit_reason

  ,concat(if(num_client_linkedaccounts > 0, 'Company_Name,', ' ') , if(num_contactmail_linkedaccounts > 0, 'Contact_Mail,', ' ') , if(num_contactphone_linkedaccounts > 0, 'Contact_Phone,', ' ') , if(num_device_linkedaccounts > 0, 'Device,', ' ') ) as general_true_hit_reason

  ,concat(if(num_ip_linkedaccounts > 0, 'IP,', ' ') , if(num_url_country_description_linkedaccounts > 0, 'URL_COUNTRY_DESCRIPTION,', ' ') , if(num_keypersonname_linkedaccounts > 0, 'Key_Person,', ' ') , if(num_contactperson_linkedaccounts > 0, 'Contact_Person,', ' ') ) as general_possible_hit_reason

 --------------- num of linked accounts ------------- 
  #no need i think, since the 'linked accounts per rule' could be referred as well
  -- ,array_length(array(select distinct x from unnest(array_concat(ifnull(account_device,[]), ifnull(account_clientname,[]), ifnull(account_contactmail,[]), ifnull(account_contactphone,[]))) x )) -1  TrueMatchNumofLinkedinAccounts
  -- ,array_length(array(select distinct x from unnest(array_concat(ifnull(account_ip,[]), ifnull(account_url,[]), ifnull(account_keypersonname,[]), ifnull(account_contactperson,[]))) x )) -1  PossibleMatchNumofLinkedinAccounts

 --------------- client information ------------- 
  ,tempt.* except(account_id)

 --------------- #linked accounts per rule ------------- 
  ,num_url_country_description_linkedaccounts
  ,num_ip_linkedaccounts
  ,num_device_linkedaccounts
  ,num_client_linkedaccounts
  ,num_keypersonname_linkedaccounts
  ,num_contactperson_linkedaccounts
  ,num_contactmail_linkedaccounts
  ,num_contactphone_linkedaccounts

--------------- #linked accounts list ------------- 
  # i think it is ok to not show this section currently
  -- ,array(select distinct x from unnest(array_concat( account_device, account_ip)) x ) as LinkedAccountsId


  ,row_number() over (partition by tempt.account_id order by tempt.device_id desc ) row_num  -- because the data above would have multiple rows of the same accountid possibly due to differenct device id, so the row_number here is used to return the first one of it

from tempt -- linked with the commented para above
left join tempt_ip_1
on tempt.client_ip = tempt_ip_1.client_ip
left join tempt_url_country_description_2 
on concat(tempt.url,tempt.countrylist, tempt.description) = tempt_url_country_description_2.url_country_description
left join tempt_client_3
on tempt.clientname = tempt_client_3.clientname
left join tempt_key_person_4
on tempt.keypersonname = tempt_key_person_4.keypersonname
left join tempt_contact_person_4
on tempt.contactperson = tempt_contact_person_4.contactperson
left join tempt_contactmail_5 
on tempt.contactmail = tempt_contactmail_5.contactmail
left join tempt_contactphone_5 
on tempt.contactphone = tempt_contactphone_5.contactphone
left join tempt_device_6
on tempt.device_id = tempt_device_6.device_id
left join `awx-dw.dwa_operation.kyc_ops_global_selfserve_businesskyc` kyc
on tempt.account_id = kyc.account_id
and kyc.account_id <> 'null'
left join `coredata-prod-82d1635c.dwd_account.basic_info` basic
on basic.id = kyc.account_id

where kyc.kyc_status = 'KYC'
-- and datetime_trunc(datetime(timestamp(create_time), 'Asia/Shanghai'), DAY) >= (current_date('Asia/Shanghai')-7)  -- only consider the cases created by client since 7 days before
)



select * except(row_num) from final_result
where row_num = 1
order by 2 desc

-- and anz_Result is not null
-- order by kyc_receive desc
-- limit 100

-- and General_Result = 'General_True_Hit' --ANZ_Possible_Hit
-- and ANZ_Result is null
-- limit 5 
